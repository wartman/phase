namespace Phase {

  use Phase::Language::{ Token, TokenType, Position }

  class Scanner {
    static keywords = [
      TokenType.TokClass: TokenType.TokClass,
      TokenType.TokEnum : TokenType.TokEnum

      // etc
    ]

    private source: Source
    private tokens: Array = []
    private reporter: ErrorReporter
    private start: Int
    private end: Int

    new(
      this.source: Source,
      this.reporter: ErrorReporter
    ) {}

    scan() {
      this.tokens = []
      this.start = 0
      this.end = 0

      while(!this.isAtEnd()) {
        this.start = this.end
        this.scanToken()
      }
      this.addToken(TokenType.TokEof)
      
      return this.tokens
    }

    scanToken() {
      var c = this.advance()
      switch (c) {
        // todo
      }
    }

    private isAtEnd() {
      return this.end >= (this.source.content |> strlen())
    }

    private peek() {
      if (this.isAtEnd()) {
        return ''
      }
      return this.source.content[this.end]
    }

    private peekNext() {
      if (this.isAtEnd()) {
        return ''
      }
      return this.source.content[this.end + 1]
    }

    private advance() {
      this.end++
      return this.source.content[this.end - 1]
    }

    private addToken(type, literal = '') {
      var text = this.source.content |> { substr(it, this.start, this.end) }
      var pos = Position(this.start, this.end, this.source.file)
      this.tokens[] = Token(type, text, literal, pos)
    }
  }

}